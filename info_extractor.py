import os
from bs4 import BeautifulSoup
import globals
import requests
import json
import time


def read_file(file_name: str, save_dir: str) -> BeautifulSoup:
    filepath = os.path.join(globals.PAGES_DIRECTORY,
                            save_dir, f"{file_name}.html")
    if os.path.isfile(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            soup = BeautifulSoup(f.read(), 'html.parser')
    else:
        print("File not found: ", filepath)
        soup = BeautifulSoup("", 'html.parser')
    return soup


def get_versions_info():
    result: dict[str, dict[str, int]] = {}
    for mom_name in globals.TEST_MOM_NAMES:
        soup = read_file("versions", mom_name)
        table_elements = soup.select('td')
        versions_dict = {}
        versions_count = {}

        for i in range(0, len(table_elements), 7):
            version_number = table_elements[i].text.strip()
            version_vulnerabilities = int(table_elements[i+5].text.strip())
            if version_number not in versions_dict:
                versions_dict[version_number] = version_vulnerabilities
                versions_count[version_number] = 1
            else:
                versions_dict[version_number] += version_vulnerabilities
                versions_count[version_number] += 1

        # Make average of vulnerabilities per version
        for version in versions_dict:
            versions_dict[version] = versions_dict[version] / \
                versions_count[version]
        result[mom_name] = versions_dict
    # print(results)
    return result


def get_vulnerabilities_info():
    result: dict[str, dict[str, int]] = {}
    for mom_name in globals.TEST_MOM_NAMES:
        soup = read_file("vulnerabilities", mom_name)
        cveIDs = soup.select('[data-tsvfield="cveId"]')
        cveIDs = list(map(lambda x: x.text.strip(), cveIDs))
        result[mom_name] = cveIDs
    # print(results)
    return result


def get_cve_info(cveID: str):
    def get_cvss(json):
        cve_metrics = json["vulnerabilities"][0]["cve"]["metrics"]
        if not cve_metrics:
            return None

        last_cvss = ""
        try:
            last_cvss = cve_metrics["cvssMetricV31"]
        except:
            last_cvss = cve_metrics["cvssMetricV2"]
        last_cvss = last_cvss[0]
        cvss_data = {
            "base": last_cvss["cvssData"]["baseScore"],
            "impact": last_cvss["impactScore"],
            "exploitability": last_cvss["exploitabilityScore"]
        }
        return cvss_data

    # if there is file with cve data, use it
    filepath = f"./{globals.CVE_DIRECTORY}/{cveID}.json"
    if os.path.isfile(filepath):
        with open(filepath, "r", encoding="utf-8") as f:
            return get_cvss(json.loads(f.read()))
    # if not, get it from nvd and save it
    url = f"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId={cveID}"
    while True:
        try:
            response = requests.get(
                url, headers=globals.REQUEST_HEADERS, allow_redirects=True)
            response.json()  # Automatically throws error if not json
            with open(filepath, "w", encoding="utf-8") as f:
                f.write(response.text)
            return get_cvss(response.json())
        except:
            print(
                f"Reached NVD rate limit while getting {cveID}, waiting {globals.SLEEP_TIME} seconds...")
            time.sleep(globals.SLEEP_TIME)


def get_info():
    versions_info = get_versions_info()
    vulnerabilities_info = get_vulnerabilities_info()
    return {"versions": versions_info, "vulnerabilities": vulnerabilities_info}


if __name__ == "__main__":
    print(get_info())
