import matplotlib.pyplot as plt
import stats
import math


def plot_cvss_scores(data):
    average_scores = stats.get_average_cvss_scores(data)
    product_names = list(average_scores.keys())
    base_scores = [score["base"] for score in average_scores.values()]
    exploitability_scores = [score["exploitability"]
                             for score in average_scores.values()]
    impact_scores = [score["impact"] for score in average_scores.values()]

    plt.figure(figsize=(10, 6))
    plt.bar(product_names, base_scores,
            label="Base Score", width=0.3, align='center')
    plt.bar([x + 0.3 for x in range(len(product_names))],
            exploitability_scores, label="Exploitability", width=0.3, align='center')
    plt.bar([x + 0.6 for x in range(len(product_names))],
            impact_scores, label="Impact", width=0.3, align='center')

    plt.title("Average CVSS Scores by Product")
    plt.xlabel("Products")
    plt.xticks(rotation=30, ha="right")
    plt.ylabel("Average CVSS Score (0-10)")
    plt.ylim(0, 10)
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


def plot_quadratic_mean_cvss_scores(data):
    quadratic_means = stats.get_quadratic_mean_cvss_scores(data)
    product_names = list(quadratic_means.keys())
    base_scores = [score["base"] for score in quadratic_means.values()]
    exploitability_scores = [score["exploitability"]
                             for score in quadratic_means.values()]
    impact_scores = [score["impact"] for score in quadratic_means.values()]

    plt.figure(figsize=(10, 6))
    plt.bar(product_names, base_scores,
            label="Base Score (Quadratic Mean)", width=0.3, align='center')
    plt.bar([x + 0.3 for x in range(len(product_names))], exploitability_scores,
            label="Exploitability (Quadratic Mean)", width=0.3, align='center')
    plt.bar([x + 0.6 for x in range(len(product_names))], impact_scores,
            label="Impact (Quadratic Mean)", width=0.3, align='center')
    plt.xlabel("Products")
    plt.ylabel("Quadratic Mean CVSS Score (0-10)")
    plt.title("Quadratic Mean CVSS Scores by Product")
    plt.xticks(rotation=45, ha="right")
    plt.ylim(0, 10)
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


def plot_vulnerabilities_per_version(data, product_name):
    if product_name not in data["versions"]:
        print(f"Product '{product_name}' not found in data.")
        return

    versions = list(data["versions"][product_name].keys())
    vulnerability_counts = list(
        data["versions"][product_name].values())
    versions.reverse()
    vulnerability_counts.reverse()
    max_count = math.ceil(max(vulnerability_counts))

    # Configure the plot
    plt.figure(figsize=(8, 5))
    plt.bar(versions, vulnerability_counts)

    plt.title(f"Number of Vulnerabilities by Version ({product_name})")
    plt.xlabel("Version")
    plt.xticks(rotation=30, ha="right")
    plt.ylabel("Number of Vulnerabilities")
    plt.yticks(range(0, max_count + 1))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


def plot_vulnerability_counts(data):
    vulnerabilities = data["vulnerabilities"]
    product_names = list(vulnerabilities.keys())
    vulnerability_counts = [len(x) for x in vulnerabilities.values()]
    max_count = math.ceil(max(vulnerability_counts))

    plt.figure(figsize=(8, 5))
    plt.bar(product_names, vulnerability_counts)

    plt.title("Number of Vulnerabilities by Product")
    plt.xlabel("Product")
    plt.xticks(rotation=30, ha="right")
    plt.ylabel("Number of Vulnerabilities")
    plt.yticks(range(0, max_count + 1))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


def plot_vulnerability_counts_pie(data):
    vulnerabilities = data["vulnerabilities"]
    product_names = list(vulnerabilities.keys())
    vulnerability_counts = [len(x) for x in vulnerabilities.values()]

    # Configure the pie chart
    plt.figure(figsize=(6, 6))  # Adjust figure size as needed
    plt.pie(vulnerability_counts, labels=product_names, autopct="%1.1f vulnerabilities",
            startangle=140)  # Customize labels and starting angle

    plt.title("Number of Vulnerabilities by Product")
    plt.axis("equal")  # Equal aspect ratio for a circular pie chart
    plt.tight_layout()
    plt.show()
