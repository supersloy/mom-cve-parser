import matplotlib.pyplot as plt
import stats
import math
import matplotlib

font = {'weight': 'bold',
        'size': 14}

matplotlib.rc('font', **font)


def plot_cvss_scores(data):
    average_scores = stats.get_average_cvss_scores(data)
    product_names = list(average_scores.keys())
    scores = average_scores.values()
    base_scores = [score["base"] for score in scores]
    exploitability_scores = [score["exploitability"]
                             for score in scores]
    impact_scores = [score["impact"] for score in scores]

    plt.figure(figsize=(10, 6))
    plt.bar([x - 0.25 for x in range(len(product_names))], base_scores,
            label="Base Score", width=0.25, align='center')
    plt.bar(product_names,
            exploitability_scores, label="Exploitability", width=0.25, align='center')
    plt.bar([x + 0.25 for x in range(len(product_names))],
            impact_scores, label="Impact", width=0.25, align='center')

    plt.title("Average CVSS Scores by Product", weight="bold")
    plt.xlabel("Products", weight="bold")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("Average CVSS Score (0-10)", weight="bold")
    plt.ylim(0, 10)
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


def plot_quadratic_mean_cvss_scores(data):
    quadratic_means = stats.get_quadratic_mean_cvss_scores(data)
    product_names = list(quadratic_means.keys())
    scores = quadratic_means.values()
    base_scores = [score["base"] for score in scores]
    exploitability_scores = [score["exploitability"]
                             for score in scores]
    impact_scores = [score["impact"] for score in scores]

    plt.figure(figsize=(10, 6))
    plt.bar([x - 0.25 for x in range(len(product_names))], base_scores,
            label="Base Score", width=0.25, align='center')
    plt.bar(product_names,
            exploitability_scores, label="Exploitability", width=0.25, align='center')
    plt.bar([x + 0.25 for x in range(len(product_names))],
            impact_scores, label="Impact", width=0.25, align='center')

    plt.title("Quadratic Mean CVSS Scores by Product", weight="bold")
    plt.xlabel("Products", weight="bold")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("Quadratic Mean CVSS Score (0-10)", weight="bold")
    plt.ylim(0, 10)
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


def plot_cves(data, product_name):
    cvss_data = data["cvss"][product_name]
    cvss_scores = [score for _, score in cvss_data.items()
                   if score is not None]
    cve_ids = [cve_id for cve_id, score in cvss_data.items()
               if score is not None]

    base_scores = [score["base"] for score in cvss_scores]
    exploitability_scores = [score["exploitability"] for score in cvss_scores]
    impact_scores = [score["impact"] for score in cvss_scores]

    plt.figure(figsize=(10, 6))
    plt.bar([x - 0.25 for x in range(len(cve_ids))], base_scores,
            label="Base Score", width=0.25, align='center')
    plt.bar(cve_ids,
            exploitability_scores, label="Exploitability", width=0.25, align='center')
    plt.bar([x + 0.25 for x in range(len(cve_ids))],
            impact_scores, label="Impact", width=0.25, align='center')

    plt.title(f"CVSS Scores of CVEs for {product_name}", weight="bold")
    plt.xlabel("Scored CVEs", weight="bold")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("CVSS Score (0-10)", weight="bold")
    plt.ylim(0, 11)
    plt.legend()
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


def plot_cvss_scores_product(data, product_name):
    average_scores = stats.get_average_cvss_scores(data)
    if product_name not in average_scores:
        print(f"Product {product_name} not found.")
        return

    scores = average_scores[product_name]
    base_score = scores["base"]
    exploitability_score = scores["exploitability"]
    impact_score = scores["impact"]

    plt.figure(figsize=(10, 6))
    colors = ["#1f77b4", "#ff7f0e", "#2ca02c"]

    plt.bar(["Base Score", "Exploitability", "Impact"], [base_score, exploitability_score, impact_score],
            width=0.8, align='center', color=colors)

    plt.title(f"Average CVSS Scores for {product_name}", weight="bold")
    plt.ylabel("Average CVSS Score (0-10)")
    plt.ylim(0, 10)
    plt.yticks(range(0, 11))
    plt.grid(axis='y', linestyle='--', alpha=0.7)
    plt.tight_layout()
    plt.show()


def plot_vulnerabilities_per_version(data, product_name):
    if product_name not in data["versions"]:
        print(f"Product '{product_name}' not found in data.")
        return

    versions = list(data["versions"][product_name].keys())
    vulnerability_counts = list(
        data["versions"][product_name].values())
    versions.reverse()
    vulnerability_counts.reverse()
    max_count = math.ceil(max(vulnerability_counts))

    # Configure the plot
    plt.figure(figsize=(8, 5))

    plt.plot(versions, vulnerability_counts, 'o-', color='black')

    plt.title(
        f"Number of Vulnerabilities by Version ({product_name})", weight="bold")
    plt.xlabel("Version", weight="bold")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("Number of Vulnerabilities", weight="bold")
    plt.yticks(range(0, max_count + 1))
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


def plot_vulnerability_counts(data):
    vulnerabilities = data["vulnerabilities"]
    product_names = list(vulnerabilities.keys())
    vulnerability_counts = [len(x) for x in vulnerabilities.values()]
    max_count = math.ceil(max(vulnerability_counts))

    plt.figure(figsize=(8, 5))
    plt.bar(product_names, vulnerability_counts)

    plt.title("Number of Vulnerabilities by Product", weight="bold")
    plt.xlabel("Product", weight="bold")
    plt.xticks(rotation=45, ha="right")
    plt.ylabel("Number of Vulnerabilities", weight="bold")
    plt.yticks(range(0, max_count + 1))
    plt.grid(axis='y', linestyle='--', alpha=0.5)
    plt.tight_layout()
    plt.show()


def plot_vulnerability_counts_pie(data):
    def autopct_format(values):
        def my_format(pct):
            total = sum(values)
            val = int(round(pct*total/100.0))
            return '{v:d}'.format(v=val)
        return my_format

    vulnerabilities = data["vulnerabilities"]
    product_names = list(vulnerabilities.keys())
    vulnerability_counts = [len(x) for x in vulnerabilities.values()]

    plt.figure(figsize=(6, 6))
    plt.pie(vulnerability_counts, labels=product_names, autopct=autopct_format(vulnerability_counts),
            startangle=140)

    plt.title("Number of Vulnerabilities by Product", weight="bold")
    plt.axis("equal")
    plt.tight_layout()
    plt.show()
