from info_extractor import get_cve_info

METRICS = ["base", "exploitability", "impact"]


def get_average_cvss_scores(data):
    product_scores = {}

    for product in data["vulnerabilities"]:
        product_scores[product] = {
            "base": 0, "exploitability": 0, "impact": 0, "count": 0}
        for cve in data["vulnerabilities"][product]:
            scores = get_cve_info(cve)
            if scores != None:
                for metric in METRICS:
                    product_scores[product][metric] += scores[metric]
                product_scores[product]["count"] += 1

    for product in product_scores:
        for metric in METRICS:
            product_scores[product][metric] /= product_scores[product][metric]

    return product_scores


def get_quadratic_mean_cvss_scores(data):
    product_scores = {}

    for product in data["vulnerabilities"]:
        product_scores[product] = {
            "base": 0, "exploitability": 0, "impact": 0, "count": 0}
        for cve in data["vulnerabilities"][product]:
            scores = get_cve_info(cve)
            if scores != None:
                for metric in METRICS:
                    product_scores[product][metric] += scores[metric] ** 2
                product_scores[product]["count"] += 1

    for product in product_scores:
        for metric in METRICS:
            product_scores[product][metric] /= product_scores[product]["count"]
            product_scores[product][metric] = product_scores[product][metric] ** 0.5

    return product_scores


def get_average_vulnerabilities_per_version(data):
    product_info = {}
    for product, versions in data["versions"].items():
        product_info[product] = {
            "vulnerabilities": 0,
            "count": 0
        }

        for version, count in versions.items():
            product_info[product]["vulnerabilities"] += count
            product_info[product]["count"] += 1

        # Calculate average
        product_info[product] = product_info[product]["vulnerabilities"] / \
            product_info[product]["count"]

    return product_info
